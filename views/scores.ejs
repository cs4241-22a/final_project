<div id="results" style="display: none">
    <div>
        <h2 id="topPercent" class="display-5 fw-bold text-light">
            </h1>
            <canvas id="myChart"></canvas>
    </div>
    <div class="chart-container" style="position: relative; height:50vh; width:80vw">
        <canvas id="allScores"></canvas>
    </div>
    <div class="chart-container" style="position: relative; height:50vh; width:80vw">
        <canvas id="myScores"></canvas>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
<script
    src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/0.5.7/chartjs-plugin-annotation.min.js"></script>

<script type="application/javascript">

    var resultsDiv = document.getElementById("results")

    window.addEventListener("updateData", function (e) {
        updateGraphs(e);
        return true;
    })

    function updateGraphs(e) {
        console.log("Updating data")
        var data = null
        data = (typeof e.detail.data !== "undefined") ? e.detail.data : getData(game);
        myScore = (typeof e.detail.data !== "undefined") ? e.detail.myScore : getData(game);
        console.log("Got data for game: %s\nuser: %s\n\tdata: %s", game, user, data)

        document.getElementById('results').style.display = null;

        setupGraphs(data, myScore);

        results.style.display = "block"
    }

    function getData(game) {
        console.log("trying to get data")
        var res = null
        fetch('/getResults', {
            method: 'POST',
            headers: { "X-CSRF-TOKEN": csrf, "Content-Type": "application/json" },
            body: JSON.stringify({ "game_type": game })
        }).then(
            async function (response) {
                res = await response.json()
            }
        );
        return res
    }


    function setupGraphs(allScore, myScore) {
        let topScore = true;
        let highIndex = 0;

        for (let i = 0; i < allScore.length; i++) {
            if (allScore[i] >= myScore) {
                highIndex = i + 1;
                topScore = false;
                break;
            }
        }

        topText = document.getElementById('topPercent');

        if (topScore) {
            topText.innerText = "New High Score!"
        }
        else {
            topPercNum = Math.round(((allScore.length - highIndex) / allScore.length) * 100)
            topText.innerText = `You Scored Top ${topPercNum}%`;
        }

        // find intv, devide by 10
        // const intv = allData[allData.length] - allData[0];
        graphLabel = []
        graphData = [0, 0, 0, 0, 0]
        for (let i = 0; i < 4; i++) {
            let intvMulti = i * Math.trunc(allScore.length / 10);
            graphLabel.push(allScore[intvMulti]);
        }
        graphLabel.push(allScore[allScore.length - 1]);

        console.log(graphLabel);
        for (const scoreElem in allScore) {
            for (let labelElem = 1; labelElem < graphLabel.length; labelElem++) {
                if (scoreElem <= graphLabel[labelElem]) {
                    graphData[labelElem - 1] += 1;
                    break;
                }
            }
        }
        console.log(graphData);

        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: graphLabel,
                datasets: [{
                    data: graphData,
                    label: "Everyone",
                    borderColor: "#3e95cd",
                    backgroundColor: "#7bb6dd",
                    fill: true,
                }
                ]
            },
            options: {
                annotation: {
                    annotations: [
                        {
                            drawTime: "afterDatasetsDraw",
                            type: "line",
                            mode: "vertical",
                            scaleID: "x-axis-0",
                            value: 5*((100-topPercNum)/100)-0.5,
                            borderWidth: 5,
                            borderColor: "red",
                            label: {
                                content: "ME",
                                enabled: true,
                                position: "top"
                            }
                        }
                    ]
                },
            }

        });
    }
</script>